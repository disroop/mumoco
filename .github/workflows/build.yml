name: Build

on:
  push:
  pull_request:
  release:
    types: [created]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Set up python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install Poetry
        uses: snok/install-poetry@v1.1.6
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: python -c 'import build; build.install_dependencies()'
      - name: Install library
        run: python -c 'import build; build.install_libraries()'
      - name: Check format with black
        run: python -c 'import build; build.check_format_with_black()'
      - name: Lint with flake8
        run: python -c 'import build; build.lint_with_flake8()'
        # todo add mypy
      - name: Run tests
        run: python -c 'import build; build.run_tests()'
      - name: Fix Code Coverage Paths
        run: |
          sed -i "s@${GITHUB_WORKSPACE}@/github/workspace/@g" ./reports/coverage.xml
      - name: SonarCloud Scan
        if: github.event_name != 'pull_request'
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      - name: Build
        run: python -c 'import build; build.build()'
      - name: Publish Dry Run
        if: github.event_name == 'push'
        run: python -c 'import build; build.build(); build.publish("${{ secrets.PYPI_USERNAME }}", "${{ secrets.PYPI_PASSWORD }}", True)'
      - name: Publish
        if: github.event_name == 'release' && github.event.action == 'created'
        run: python -c 'import build; build.build(); build.publish("${{ secrets.PYPI_USERNAME }}", "${{ secrets.PYPI_PASSWORD }}")'